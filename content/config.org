:PROPERTIES:
:header-args: emacs-lisp :tangle ./init.el :mkdirp yes
:+TITLE: Emacs Configuration
:END:

* General hint
#+begin_src emacs-lisp
  ;;; ; Insert the following line in your local .emacs file:
  ;;;
  ;;; (load "~/Dropbox/init/emacs/init.el")
  ;;; (load "~/Dropbox/init/emacs/skeletons.el")
  ;;;
#+end_src
* Package System Setup
#+begin_src emacs-lisp
(add-to-list 'load-path "~/Dropbox/init/emacs/emacs.d/lisp/")

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                            ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (require 'use-package)
#+end_src
* Debug startup time
#+begin_src emacs-lisp
  (defun display-startup-time ()
    ( message " Emacs loaded in %s with %d garbage collections."
              ( format "%.2f seconds"
                       (float-time
                        (time-subtract after-init-time before-init-time)))
              gcs-done))
  (add-hook 'emacs-startup-hook #'display-startup-time)

(setq use-package-verbose t)
#+end_src
* Flyspell mode
#+begin_src emacs-lisp
  (use-package flyspell
    :custom
    (ispell-program-name "aspell")
    ;; Default dictionary. To change do M-x ispell-change-dictionary RET.
    (aspell-dictionary "de_DE")
    (aspell-program-name "/usr/bin/aspell")
    (ispell-dictionary "en_US")
    (ispell-program-name "/usr/bin/aspell")
    :config
    (define-key flyspell-mode-map [down-mouse-3] 'flyspell-correct-word)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'TeX-mode-hook 'flyspell-mode)
    (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode))

#+end_src
* Completion
#+begin_src emacs-lisp
  (setq completion-styles '(basic initials partial-completion substring flex))
#+End_src
* Basic UI Configuration

#+begin_src emacs-lisp
  (global-hl-line-mode 1)                   ; highlight line
  (set-face-background 'hl-line "#999999")
  (tool-bar-mode -1) ; turn off tool-bar
  (menu-bar-mode -1) ; turn off menu-bar
  (normal-erase-is-backspace-mode 1)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen  t)
  (setq initial-scratch-message "")
  (setq line-number-mode t)
  (setq column-number-mode t)
  (fset 'yes-or-no-p 'y-or-n-p) ; simplify interactive dialogue
  (setq show-paren-delay 0)
  (show-paren-mode t) ; parentheses highlighting
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (set-face-attribute 'default nil :height 120) ; change font size

  (setq scroll-margin 3
  scroll-conservatively 10000)

  ;; visual-fill-column
  (require 'visual-fill-column)
  (use-package visual-fill-column)
  (setq-default fill-column 100)

  ;; line wrapping
  (global-visual-line-mode 1)

  (setq make-backup-files nil)
#+end_src

* SimpleHttpd
#+begin_src emacs-lisp
  (use-package simple-httpd
  :ensure t)
#+end_src
* Org mode settings
** Basic config
#+begin_src emacs-lisp
  (defun org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode)
    (auto-fill-mode)
    ;;(visual-fill-column-mode) ;; problems in combination with org-indent-mode
    )

  (use-package org :pin gnu )
  (use-package org-mode
    :hook (org-mode . org-mode-setup))

  (setq initial-major-mode 'org-mode)
  (setq default-major-mode 'org-mode)
  (setq org-M-RET-may-split-line '((default . nil)))
  (setq org-insert-heading-respect-content t)
  ;(setq org-log-into-drawer t)
  ; (setq org-log-done 'time)
  ;; Org manual. Evaluate: (info "(org) Tracking TODO state changes")
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "WAIT" "INPROGRESS(s)" "|" "DONE(d!)" "CANCELED(c)")))
  (eval-after-load "org"
    '(progn
       ;; Change .pdf association directly within the alist
       (setcdr (assoc "\\.pdf\\'" org-file-apps) "evince %s")))
  (add-hook 'org-mode-hook
            (lambda( )
              )
            )
  (setq org-tag-alist
        '(;;Places
          ("@homeMunich" . ?H)
          ("@homeUf" . ?U)
          ("@workAra" . ?A)
          ("@workUfo" . ?W)

          ;;Contexts
          ("work" . ?w)
          ("techLearn" . ?t)
          ;
          ("relax" . ?r)
          ("creative" . ?c)
          ("sport" . ?s)
          ("hobby" . ?h)
          ;
          ("planning" . ?p)
          ))


#+end_src
** Org-roam
#+begin_src emacs-lisp
      (use-package org-roam
        :ensure t
        :init
        (setq org-roam-v2-ack t)
        :custom
        (org-roam-directory "~/Dropbox/org/roam")

        (org-roam-dailies-directory "journal/")
      (org-roam-completion-everywhere t)
        :bind (("C-c n l" . org-roam-buffer-toggle)
               ("C-c n f" . org-roam-node-find)
               ("C-c n i" . org-roam-node-insert)
             :map org-mode-map
           ("C-M-j" . completion-at-point)
         :map org-roam-dailies-map
       ("Y" . org-roam-dailies-capture-yesterday)
    ("T" . org-roam-dailies-capture-tomorrow)
       )
      :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
        :config
      (require 'org-roam-dailies)
    (org-roam-db-autosync-mode)
        (org-roam-setup))

  (use-package org-roam-ui
      :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))
#+end_src

** Pomodoro
#+begin_src emacs-lisp
(setq org-clock-sound "~/Dropbox/audio/oriental_gong.wav")
#+end_src

** Timestamp
#+begin_src emacs-lisp
;;    (setq-default org-display-custom-times t)
;;    (setq org-time-stamp-custom-formats '("<%Y-%m-%d %H:%M>" . "<%H:%M>"))
  (defun now (a)
    "Insert string for the current time formatted like '2:34 PM' or 1507121460"
    (interactive)
    (setq minute (string-to-number (format-time-string "%02M") 10))
    (setq remainder (mod  minute 3))
    (setq current_time (concat (format-time-string "%02H") ":" (format "%02d" (- minute remainder))))

    (insert (concat current_time " " a "\n" current_time " - "))
  ;;        (insert (format-time-string "%02H:%02M"))
    )

#+end_src
** UI
#+begin_src emacs-lisp
     (require 'org-bullets)
     (use-package org-bullets
                  :hook (org-mode . org-bullets-mode)
                  :custom
                  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
                  )

   ;; org heading non monospace headings
   ;(dolist (face '((org-level-1 . 1.2)
   ;		(org-level-2 . 1.1)
   ;		(org-level-3 . 1.05)
   ;		(org-level-4 . 1.0)
   ;		(org-level-5 . 1.1)
   ;		(org-level-6 . 1.1)
   ;		(org-level-7 . 1.1)
   ;		(org-level-8 . 1.1)))
   ;  (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

#+end_src
** Inline image display
#+begin_src emacs-lisp
(setq image-file-name-extensions
   (quote
    ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "pdf" "bmp")))

(setq org-image-actual-width 800)

(setq org-imagemagick-display-command "convert -density 800 \"%s\" -thumbnail \"%sx%s>\" \"%s\"")
(defun org-display-inline-images (&optional include-linked refresh beg end)
  "Display inline images.
Normally only links without a description part are inlined, because this
is how it will work for export.  When INCLUDE-LINKED is set, also links
with a description part will be inlined.  This
can be nice for a quick
look at those images, but it does not reflect what exported files will look
like.
When REFRESH is set, refresh existing images between BEG and END.
This will create new image displays only if necessary.
BEG and END default to the buffer boundaries."
  (interactive "P")
  (unless refresh
    (org-remove-inline-images)
    (if (fboundp 'clear-image-cache) (clear-image-cache)))
  (save-excursion
    (save-restriction
      (widen)
      (setq beg (or beg (point-min)) end (or end (point-max)))
      (goto-char beg)
      (let ((re (concat "\\[\\[\\(\\(file:\\)\\|\\([./~]\\)\\)\\([^]\n]+?"
                        (substring (org-image-file-name-regexp) 0 -2)
                        "\\)\\]" (if include-linked "" "\\]")))
            old file ov img)
        (while (re-search-forward re end t)
          (setq old (get-char-property-and-overlay (match-beginning 1)
                                                   'org-image-overlay)
        file (expand-file-name
                      (concat (or (match-string 3) "") (match-string 4))))
          (when (file-exists-p file)
            (let ((file-thumb (format "%s%s_thumb.png" (file-name-directory file) (file-name-base file))))
              (if (file-exists-p file-thumb)
                  (let ((thumb-time (nth 5 (file-attributes file-thumb 'string)))
                        (file-time (nth 5 (file-attributes file 'string))))
                    (if (time-less-p thumb-time file-time)
            (shell-command (format org-imagemagick-display-command
                           file org-image-actual-width org-image-actual-width file-thumb) nil nil)))
                (shell-command (format org-imagemagick-display-command
                                         file org-image-actual-width org-image-actual-width file-thumb) nil nil))
              (if (and (car-safe old) refresh)
                  (image-refresh (overlay-get (cdr old) 'display))
                (setq img (save-match-data (create-image file-thumb)))
                (when img
                  (setq ov (make-overlay (match-beginning 0) (match-end 0)))
                  (overlay-put ov 'display img)
                  (overlay-put ov 'face 'default)
                  (overlay-put ov 'org-image-overlay t)
                  (overlay-put ov 'modification-hooks
                               (list 'org-display-inline-remove-overlay))
                  (push ov org-inline-image-overlays))))))))))
#+end_src
** Org-tree-slide
#+begin_src emacs-lisp
  (use-package hide-mode-line)
  (defun presentation-setup ()
    (hide-mode-line-mode 1)
    (org-display-inline-images))

  (defun presentation-end ()
    (hide-mode-line-mode 0))

  (use-package org-tree-slide
    :hook ((org-tree-slide-play . presentation-setup)
           (org-tree-slide-stop . presentation-end))
    :custom
    (org-tree-slide-slide-in-effect t)
    (org-tree-slide-activate-message "Presentation started")
    (org-tree-slide-deactivate-message "Presentation finished")
    (org-tree-slide-header t)
    (org-tree-slide-breadcrumbs " // ")
    (org-image-actual-width nil))
  (global-set-key "\C-cp" 'org-tree-slide-mode)
#+end_src
** keymaps
#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c r") 'org-refile)
#+end_src

** Babel
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (shell . t)
     (python . t)
     ))
  (setq org-src-fontify-natively t)

  (require 'org-tempo) ; enable <s expansion for generic source code block
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("gp" . "src gnuplot"))
#+end_src

** Agenda customization
#+begin_src emacs-lisp
  (setq org-directory "~/org/")
  (setq org-agenda-files
        '(
          "~/Dropbox/org/projects.org"
          "~/Dropbox/org/habits.org"
          "~/Dropbox/org/birthdays.org"
          "~/Dropbox/org/inbox.org"
          "~/Dropbox/org/tickler.org"
          ))

  (setq org-habit-show-habits-only-for-today nil)
  (setq org-agenda-start-on-weekday nil)
  (setq org-startup-folded t)
  (setq org-agenda-custom-commands
        '(
          ("d" "Daily agenda"
           (
            (agenda ""     ((org-agenda-span 'day)))
            )
           ((org-agenda-compact-blocks t))
           )

          ("w" "Next 3 days"
           (
            ( agenda ""     ((org-agenda-span 3)) )

            )
           )



          ("n" "Next Tasks"
           (
            (todo "NEXT" ((org-agenda-overriding-header "Next Actions")))
            )
           )


          ("C" "Tasks by context"
           (
            (tags "work|techLearn"
                  (
                   (org-agenda-overriding-header "work|techLearn")
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo '("TODO" "NEXT" "WAIT" "INPROGRESS") ))
                   )
                  )
            (tags "relax|creative|sport|hobby"
                  (
                   (org-agenda-overriding-header "relax|creative|sport|hobby")
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo '("TODO" "NEXT" "WAIT" "INPROGRESS") ))
                   )
                  )
            (tags "planning"
                  (
                   (org-agenda-overriding-header "planning")
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo '("TODO" "NEXT" "WAIT" "INPROGRESS") ))
                   )
                  )
            )
           )
          )
        )

#+end_src

** Capturing and refiling
#+begin_src emacs-lisp
  ;; Refiling tasks
  (setq org-refile-targets '(("~/Dropbox/org/projects.org" :maxlevel . 3)
                             ("~/Dropbox/org/archive.org" :maxlevel . 3)
                             ("~/Dropbox/org/someday.org" :maxlevel . 3)
                             ("~/Dropbox/org/habits.org" :maxlevel . 3)
                             ("~/Dropbox/org/tickler.org" :maxlevel . 2)))


   (advice-add 'org-refile :after 'org-save-all-org-buffers) ;autosave


  ;; Capture templates
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/Dropbox/org/inbox.org" "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline "~/Dropbox/org/tickler.org" "Tickler")
                                 "* %i%? \n %U")))

#+end_src

** Habits
#+begin_src emacs-lisp
 (require 'org-habit)
 (add-to-list 'org-modules 'org-habit)
 (setq org-habit-graph-column 60)
#+end_src



** Calendar export
#+begin_src emacs-lisp
  (setq org-icalendar-include-todo t)
  (setq org-icalendar-force-alarm t)
#+end_src
* Embark

** General setup
#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
)
#+end_src

* Tex settings
#+begin_src emacs-lisp
;; compile tex documents to pdf
(setq TeX-PDF-mode t)

; increase size of latex images
(require 'org)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))

#+end_src

* Hooks
#+begin_src emacs-lisp
;; before saving
(add-hook 'before-save-hook
  (lambda ()
    ;; remove unnecessary whitespace
    (delete-trailing-whitespace)
  )
)

;; after saving
(add-hook 'after-save-hook
  (lambda ()
    ;; auto chmod +x if first line starts with `#!':
    (executable-make-buffer-file-executable-if-script-p)
  )
)

#+end_src

** Language specific hooks
*** awk
#+begin_src emacs-lisp
(add-hook 'awk-mode-hook
  (lambda ()
    (setq comment-start "#")
    (setq indent-tabs-mode nil)
    (setq c-default-style "bsd")
    (setq c-basic-offset 2)
  )
)
#+end_src
*** Fortran
#+begin_src emacs-lisp
(setq auto-mode-alist
  (nconc
   '( ("\\.F90$" . f90-mode) ("\\.fp$"  . fortran-mode) )
   auto-mode-alist
  )
)
#+end_src
*** Makefile
#+begin_src emacs-lisp
(add-hook 'makefile-mode-hook
  (lambda ()
    (setq indent-tabs-mode t)
  )
)
#+end_src

*** Gnuplot
#+begin_src emacs-lisp

(autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
(setq auto-mode-alist (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))
(setq auto-mode-alist (append '(("\\.gnu$" . gnuplot-mode)) auto-mode-alist))

  (add-hook 'gnuplot-mode-hook
     (lambda ()
              (setq indent-tabs-mode nil)
      (setq comment-start "#")
      (setq indent-tabs-mode t)
    )
  )
#+end_src

*** Emacs-lisp
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook
  (lambda ()
    (setq indent-tabs-mode nil)
    (setq comment-start ";")
  )
)
#+end_src

*** Python
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
  (lambda ()
    (setq indent-tabs-mode nil)
    (setq comment-start "#")
  )
)
#+end_src

*** Bash
#+begin_src emacs-lisp
(add-hook 'sh-mode-hook
  (lambda ()
    (setq indent-tabs-mode nil)
    (setq comment-start "#")
    (setq indent-tabs-mode nil)
    (setq sh-basic-offset 2)
  )
)
#+end_src

*** Text mode
#+begin_src emacs-lisp
(add-hook 'text-mode-hook
  (lambda ()
    (auto-fill-mode t)
    (setq default-justification 'left)
    (if (not (char-or-string-p comment-start))
      (setq comment-start "")
    )
  )
)
#+end_src

*** Latex
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'reftex-mode)
#+end_src

* Go
#+begin_src emacs-lisp
;; Company mode
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)

;; Go - lsp-mode
;; Set up before-save hooks to format buffer and add/delete imports.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

;; Start LSP Mode and YASnippet mode
(add-hook 'go-mode-hook #'lsp-deferred)
(add-hook 'go-mode-hook #'yas-minor-mode)


#+end_src

* load themes
- dark themes
#+begin_src emacs-lisp
  (load-theme 'zenburn t)
  ;(load-theme 'manoj-dark    t )
  ;(load-theme 'modus-vivendi t )
  ;(load-theme 'sunburn       t )
  ;(load-theme 'tsdh-dark     t )
#+end_src
- light themes
#+begin_src emacs-lisp
  ;(load-theme 'modus-operandi t )
  ;(load-theme 'tsdh-light    t )

#+end_src
